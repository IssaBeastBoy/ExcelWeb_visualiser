//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//

package com.example.dashboard;

import java.nio.file.Files;
import java.nio.file.LinkOption;
import java.nio.file.Path;
import java.util.List;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.Event;
import javafx.fxml.FXML;
import javafx.scene.chart.BarChart;
import javafx.scene.chart.CategoryAxis;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.PieChart;
import javafx.scene.chart.PieChart.Data;
import javafx.scene.chart.XYChart.Series;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.RadioButton;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.AnchorPane;

public class Controller {
    @FXML
    private TableView<combination_Table> tableChart;
    @FXML
    private TableColumn firstCol = new TableColumn("Pillars");
    @FXML
    private TableColumn secCol = new TableColumn("Products");
    @FXML
    private TableColumn thirdCol = new TableColumn("Amount of Customers");
    @FXML
    private PieChart pieChart;
    @FXML
    private BarChart<String, Integer> barChart;
    @FXML
    private CategoryAxis barChartX = new CategoryAxis();
    @FXML
    private NumberAxis barChartY = new NumberAxis();
    @FXML
    private AnchorPane overlapCharts;
    @FXML
    private AnchorPane comparsionCharts;
    @FXML
    private TextField comparsionFileLoc;
    @FXML
    private RadioButton Insure;
    @FXML
    private RadioButton Connect;
    @FXML
    private RadioButton Invest;
    @FXML
    private RadioButton Fusion;
    @FXML
    private RadioButton Transact;
    @FXML
    private RadioButton Secured_Lend;
    @FXML
    private RadioButton Unsecured_Lend;
    @FXML
    private Button submitCompareFile;
    private Integer totalCustomers;
    @FXML
    private RadioButton tableSelect;
    @FXML
    private RadioButton pieChartSelect;
    @FXML
    private RadioButton barGraphSelect;
    private final ObservableList<combination_Table> tableValues = FXCollections.observableArrayList();
    private final ObservableList<Data> pieChartValues = FXCollections.observableArrayList();
    private final Series<String, Integer> barGraphValues = new Series();
    @FXML
    private String excel_loc = "";
    private List<String> combinationList;
    private List<Integer> customerNumberList;
    private List<int[]> offerSize;

    @FXML
    private TableView<Ingest_CustomerInfo> Customer_details;
    @FXML
    private TableColumn Offer_ID = new TableColumn("Offer_ID");
    @FXML
    private TableColumn Offer_name = new TableColumn("Offer_name");
    @FXML
    private TableColumn KPI_risk = new TableColumn("KPI_risk");
    @FXML
    private TableColumn Segment = new TableColumn("Segment");
    @FXML
    private TableColumn Age_bend = new TableColumn("Age_bend");
    @FXML
    private TableColumn Income_bend = new TableColumn("Income_bend");
    @FXML
    private TableColumn Primary_acc = new TableColumn("Primary_acc");
    @FXML
    private TableColumn Relationship = new TableColumn("Relationship");
    @FXML
    private TableColumn Education = new TableColumn("Education");
    @FXML
    private TableColumn Funeral_pol = new TableColumn("Funeral_pol");
    @FXML
    private TableColumn Customers = new TableColumn("Customers");

    private String CustomerExcel = "";

    public String getCustomerExcel() {
        return CustomerExcel;
    }

    public void setCustomerExcel(String customerExcel) {
        CustomerExcel = customerExcel;
    }

    @FXML
    private TextField Ingest;

    public Controller() {
    }

    public void setExcel_loc(String excel_loc) {
        this.excel_loc = excel_loc;
    }

    public String getExcel_loc() {
        return this.excel_loc;
    }

    public void errBox(String message) {
        Alert errMessage = new Alert(AlertType.ERROR);
        errMessage.setContentText(message);
        errMessage.show();
    }

    @FXML
    private void drawCharts(ActionEvent event) {
        if (!this.excel_loc.isEmpty() && !Files.notExists(Path.of(this.excel_loc), new LinkOption[0])) {
            this.drawTable();
            this.drawPieChart();
            this.drawBarGraph();
            this.comparsionCharts.setVisible(true);
        } else {
            String errMessage = "Path does not exist. Please check the given path or the excel spreadsheet.";
            this.errBox(errMessage);
        }

    }

    private void customerBandTable(){

        Ingest_CustomerInfo customer_Details = new Ingest_CustomerInfo();
        customer_Details.

        if (inputExcel.isError()) {
            this.errBox(inputExcel.getErrMessage());
        } else {
            this.tableChart.getItems().clear();
            this.overlapCharts.setVisible(true);
            Processor offerDetails = new Processor();
            List<int[]> position = offerDetails.offerPositions(inputExcel.getCombination());
            List<int[]> sort = offerDetails.sortOffers(position);
            this.combinationList = offerDetails.offerCombos(inputExcel.getCombination(), sort, inputExcel);
            this.customerNumberList = offerDetails.customerCount(inputExcel.getCombination(), sort);
            this.offerSize = offerDetails.getOfferCount();
            int count = 1;
            this.tableChart.setVisible(true);
            this.totalCustomers = 0;

            for(int index = 0; index < this.offerSize.size(); ++count) {
                this.tableValues.add(new combination_Table(count + ". " + (String)this.combinationList.get(index), ((int[])this.offerSize.get(index))[1], (Integer)this.customerNumberList.get(index)));
                this.totalCustomers = this.totalCustomers + (Integer)this.customerNumberList.get(index);
                ++index;
            }
    }

    @FXML
    private void processExcel(ActionEvent event){
        Button display = (Button)selected.getSource();

        if (!this.CustomerExcel.isEmpty() && !Files.notExists(Path.of(this.CustomerExcel), new LinkOption[0])) {

        } else {
            String errMessage = "Path does not exist. Please check the given path or the excel spreadsheet.";
            this.errBox(errMessage);
        }
    }

    @FXML
    private void Ingest(ActionEvent event) {
        TextField loca = (TextField)event.getSource();
        this.setCustomerExcel(loca.getText());
    }

    @FXML
    private void Ingest(MouseEvent event) {
        TextField loca = (TextField)event.getSource();
        this.setCustomerExcel(loca.getText());
    }

    private void drawTable() {
        Ingest_Overlap inputExcel = new Ingest_Overlap();
        inputExcel.setExcel_loc(this.getExcel_loc());
        inputExcel.parseSheets();
        if (inputExcel.isError()) {
            this.errBox(inputExcel.getErrMessage());
        } else {
            this.tableChart.getItems().clear();
            this.overlapCharts.setVisible(true);
            Processor offerDetails = new Processor();
            List<int[]> position = offerDetails.offerPositions(inputExcel.getCombination());
            List<int[]> sort = offerDetails.sortOffers(position);
            this.combinationList = offerDetails.offerCombos(inputExcel.getCombination(), sort, inputExcel);
            this.customerNumberList = offerDetails.customerCount(inputExcel.getCombination(), sort);
            this.offerSize = offerDetails.getOfferCount();
            int count = 1;
            this.tableChart.setVisible(true);
            this.totalCustomers = 0;

            for(int index = 0; index < this.offerSize.size(); ++count) {
                this.tableValues.add(new combination_Table(count + ". " + (String)this.combinationList.get(index), ((int[])this.offerSize.get(index))[1], (Integer)this.customerNumberList.get(index)));
                this.totalCustomers = this.totalCustomers + (Integer)this.customerNumberList.get(index);
                ++index;
            }

            this.firstCol.setCellValueFactory(new PropertyValueFactory("combination"));
            this.secCol.setCellValueFactory(new PropertyValueFactory("combinationNumber"));
            this.thirdCol.setCellValueFactory(new PropertyValueFactory("customerCount"));
            this.tableChart.setItems(this.tableValues);
            this.tableSelect.setSelected(true);
            this.pieChartSelect.setSelected(false);
            this.pieChart.setVisible(false);
            this.barGraphSelect.setSelected(false);
            this.barChart.setVisible(false);
        }

    }

    private void drawPieChart() {
        this.pieChart.getData().clear();
        int combinationCount = ((int[])this.offerSize.get(0))[1];
        int combinationSum = (Integer)this.customerNumberList.get(0);

        for(int index = 1; index < this.offerSize.size(); ++index) {
            int percentage;
            if (combinationCount != ((int[])this.offerSize.get(index))[1]) {
                percentage = combinationSum * 100 / this.totalCustomers;
                this.pieChartValues.add(new Data(String.valueOf(combinationCount) + " Pillars: " + percentage + "%", (double)combinationSum));
                combinationCount = ((int[])this.offerSize.get(index))[1];
                combinationSum = (Integer)this.customerNumberList.get(index);
            } else if (index + 1 == this.offerSize.size()) {
                percentage = combinationSum * 100 / this.totalCustomers;
                this.pieChartValues.add(new Data(String.valueOf(combinationCount) + " Pillar: " + percentage + "%", (double)combinationSum));
            } else {
                combinationSum += (Integer)this.customerNumberList.get(index);
            }
        }

        this.pieChart.setData(this.pieChartValues);
        this.pieChart.setTitle("Pillar combination count");
        this.pieChart.setClockwise(true);
        this.pieChart.setLabelsVisible(true);
        this.pieChart.setStartAngle(180.0D);
    }

    private void drawBarGraph() {
        this.barChart.getData().clear();
        this.barChartX.setLabel("Pillars");
        this.barChartY.setLabel("Percentage(%)");
        this.barChart.setTitle("Pillars percentage distribution");
        int combinationCount = ((int[])this.offerSize.get(0))[1];
        int combinationSum = (Integer)this.customerNumberList.get(0);

        for(int index = 1; index < this.offerSize.size(); ++index) {
            int percentage;
            if (combinationCount != ((int[])this.offerSize.get(index))[1]) {
                percentage = combinationSum * 100 / this.totalCustomers;
                this.barGraphValues.getData().add(new javafx.scene.chart.XYChart.Data(String.valueOf(combinationCount) + " Pillars", percentage));
                combinationCount = ((int[])this.offerSize.get(index))[1];
                combinationSum = (Integer)this.customerNumberList.get(index);
            } else if (index + 1 == this.offerSize.size()) {
                percentage = combinationSum * 100 / this.totalCustomers;
                this.barGraphValues.getData().add(new javafx.scene.chart.XYChart.Data(String.valueOf(combinationCount) + " Pillar", percentage));
            } else {
                combinationSum += (Integer)this.customerNumberList.get(index);
            }
        }

        this.barChart.getData().add(this.barGraphValues);
    }

    @FXML
    private void chartsChangeView(ActionEvent selected) {
        RadioButton display = (RadioButton)selected.getSource();
        if (display.getId().equals("tableSelect")) {
            this.tableChart.setVisible(true);
            this.pieChart.setVisible(false);
            this.barChart.setVisible(false);
            this.tableSelect.setSelected(true);
            this.pieChartSelect.setSelected(false);
            this.barGraphSelect.setSelected(false);
        } else if (display.getId().equals("pieChart")) {
            this.tableChart.setVisible(false);
            this.pieChart.setVisible(true);
            this.barChart.setVisible(false);
            this.tableSelect.setSelected(false);
            this.pieChartSelect.setSelected(true);
            this.barGraphSelect.setSelected(false);
        } else if (display.getId().equals("barGraph")) {
            this.tableChart.setVisible(false);
            this.pieChart.setVisible(false);
            this.barChart.setVisible(true);
            this.tableSelect.setSelected(false);
            this.pieChartSelect.setSelected(false);
            this.barGraphSelect.setSelected(true);
        }

    }

    @FXML
    private void subsegmentSelect(ActionEvent selected) {
        RadioButton selectedSubsegment = (RadioButton)selected.getSource();
        if (selectedSubsegment.getId().equals("Insure")) {
            this.Insure.setSelected(true);
            this.Invest.setSelected(false);
            this.Connect.setSelected(false);
            this.Transact.setSelected(false);
            this.Fusion.setSelected(false);
            this.Secured_Lend.setSelected(false);
            this.Unsecured_Lend.setSelected(false);
        } else if (selectedSubsegment.getId().equals("Invest")) {
            this.Insure.setSelected(false);
            this.Invest.setSelected(true);
            this.Connect.setSelected(false);
            this.Transact.setSelected(false);
            this.Fusion.setSelected(false);
            this.Secured_Lend.setSelected(false);
            this.Unsecured_Lend.setSelected(false);
        } else if (selectedSubsegment.getId().equals("Connect")) {
            this.Insure.setSelected(false);
            this.Invest.setSelected(false);
            this.Connect.setSelected(true);
            this.Transact.setSelected(false);
            this.Fusion.setSelected(false);
            this.Secured_Lend.setSelected(false);
            this.Unsecured_Lend.setSelected(false);
        } else if (selectedSubsegment.getId().equals("Transact")) {
            this.Insure.setSelected(false);
            this.Invest.setSelected(false);
            this.Connect.setSelected(false);
            this.Transact.setSelected(true);
            this.Fusion.setSelected(false);
            this.Secured_Lend.setSelected(false);
            this.Unsecured_Lend.setSelected(false);
        } else if (selectedSubsegment.getId().equals("Fusion")) {
            this.Insure.setSelected(false);
            this.Invest.setSelected(false);
            this.Connect.setSelected(false);
            this.Transact.setSelected(false);
            this.Fusion.setSelected(true);
            this.Secured_Lend.setSelected(false);
            this.Unsecured_Lend.setSelected(false);
        } else if (selectedSubsegment.getId().equals("Secured_Lend")) {
            this.Insure.setSelected(false);
            this.Invest.setSelected(false);
            this.Connect.setSelected(false);
            this.Transact.setSelected(false);
            this.Fusion.setSelected(false);
            this.Secured_Lend.setSelected(true);
            this.Unsecured_Lend.setSelected(false);
        } else if (selectedSubsegment.getId().equals("Unsecured_Lend")) {
            this.Insure.setSelected(false);
            this.Invest.setSelected(false);
            this.Connect.setSelected(false);
            this.Transact.setSelected(false);
            this.Fusion.setSelected(false);
            this.Secured_Lend.setSelected(false);
            this.Unsecured_Lend.setSelected(true);
        }

    }

    @FXML
    private void plotCompareCharts(ActionEvent chart) {
    }

    @FXML
    private void Location(ActionEvent event) {
        TextField loca = (TextField)event.getSource();
        this.setExcel_loc(loca.getText());
    }

    @FXML
    private void Location(MouseEvent event) {
        TextField loca = (TextField)event.getSource();
        this.setExcel_loc(loca.getText());
    }
}
